
'''
board = [ ["O"] * 5 ] * 5
print(check_win_conditions(board, "O"))
'''

'''
board = [ ["O"] * 5 ] * 5
print(check_for_connections(board, 3, 2, "O"))
board = [ ["X"] * 5 ] * 5
print(check_for_connections(board, 4, 1, "O"))
'''

'''
def check_for_connections(board, spot_row, spot_col, team):
    connections = []
    for row in range(-1, 2, 1):
        for col in range(-1, 2, 1):
            if (spot_row + row > -1 and spot_row + row < 5 and spot_col + col > -1 and spot_col + col < 5):
                if (board[spot_row + row][spot_col + col] == team):
                    connections.append("(" + str(spot_row + row) + "," + str(spot_col + col) + ")")
    return connections
'''

'''
row1 = [" ", " ", " ", " ", " "]
row2 = ["X", " ", " ", " ", " "]
row3 = ["X", " ", " ", " ", " "]
row4 = ["X", " ", " ", " ", " "]
row5 = ["O", " ", " ", " ", "O"]
grid = [row1, row2, row3, row4, row5]

print(score_placement(grid, "O", 2, 4, 4, 4))
print(score_placement(grid, "O", 2, 4, 2, 0))
'''

row1 = ["X", "X", " ", " ", " "]
row2 = ["X", " ", " ", " ", " "]
row3 = ["0", " ", " ", " ", " "]
row4 = ["X", " ", " ", " ", " "]
row5 = [" ", " ", " ", " ", " "]
grid = [row1, row2, row3, row4, row5]

print(check_for_streaks(grid, "X"))

'''
values_to_remove = [0, 1]
for value_to_remove in values_to_remove:
    while value_to_remove in streaks:
        streaks.remove(value_to_remove)
'''


'''
def distance_from_center(spot_row, spot_col):
    if (spot_row % 4 == 0 or spot_col % 4 == 0):
        return 2
    elif(spot_row == 2 and spot_col == 2):
        return 0
    else:
        return 1
'''